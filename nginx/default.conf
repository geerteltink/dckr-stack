server {
    # Internal image resizing server.
    listen 8800;

    # Images are stored as /app/public/uploads/1f/af/1a/1faf1a317681d0ac2d6516fb009316dbebd8cb4d.jpg
    location ~ "^/images/(?<width>\d+)/(?<hash>(?<part1>[0-9a-f]{2})(?<part2>[0-9a-f]{2})(?<part3>[0-9a-f]{2})[0-9a-f]{34})(?<extension>\.[a-z]+)$" {
        alias /app/public/uploads/$part1/$part2/$part3/$hash$extension;
        image_filter resize $width -;
        image_filter_jpeg_quality 75;
        image_filter_buffer 8M;
        image_filter_interlace on;
        image_filter_transparency off;
    }
}

proxy_cache_path /tmp/nginx-image-cache/ levels=1:2 keys_zone=images:10M max_size=256M inactive=3d;

server {
    listen [::]:80 default_server;
    listen 80 default_server;

    index index.html index.php;

    # The host name to respond to
    server_name _;

    # Path for static files
    root /app/public/;

    # Specify a charset
    charset utf-8;

    location /images {
        # Nginx needs you to manually define DNS resolution when using
        # variables in proxy_pass. Creating this dummy location avoids that.
        # The error is: "no resolver defined to resolve localhost".
        proxy_pass http://127.0.0.1:8800/;
    }

    location / {
        try_files $uri $uri/ /index.php$is_args$args;
    }

    # Feed
    location ~* \.(?:rss|atom)$ {
        add_header Cache-Control "max-age=3600";
    }

    # Icons, video, audio, HTC
    location ~* \.(?:ico|cur|gz|svg|mp4|ogg|ogv|webm|htc)$ {
        add_header Cache-Control "max-age=2592000";
        access_log off;
    }

    # CSS, JavaScript and images
    location ~* \.(?:css|js|png|jpg|jpeg|gif)$ {
        add_header Cache-Control "max-age=2592000";
        access_log off;

        # Only serve widths of specific widths so we can cache a bit more effectively
        location ~ "^/images/(?<width>(256|512|800|1280|1920))/(?<image>.+)$" {
            add_header X-Proxy-Cache $upstream_cache_status;

            # Proxy to internal image resizing server
            proxy_pass http://127.0.0.1:8800/images/$width/$image;
            proxy_cache images;
            proxy_cache_valid 200 14d;
        }

        # Built-in filename-based cache busting
        location ~* (.+)\.(?:\d+)\.(css|js|png|jpg|jpeg|gif)$ {
            add_header Cache-Control "max-age=31536000";
            try_files $uri $1.$2 =404;
        }
    }

    # WebFonts
    location ~* \.(?:ttf|ttc|otf|eot|woff|woff2)$ {
        add_header Cache-Control "max-age=2592000";
        access_log off;
    }

    # PHP
    location ~* \.php$ {
        try_files $uri =404;

        fastcgi_split_path_info ^(.+\.php)(/.*)$;
        fastcgi_index   index.php;
        fastcgi_pass    php:9000;

        include         fastcgi_params;
        fastcgi_param   SCRIPT_FILENAME $document_root$fastcgi_script_name;
    }

    # Override favicon.ico
	location = /favicon.ico {
		alias /opt/media/images/favicon.ico;
		access_log off;
	}

    # Override apple-touch-icon
	location ~ ^/apple-touch-icon(.*)\.png$ {
		default_type image/png;
		alias /opt/media/images/apple-touch-icon.png;
		access_log off;
	}

    # Prevent clients from accessing hidden files (starting with a dot)
    # This is particularly important if you store .htpasswd files in the site hierarchy
    # Access to `/.well-known/` is allowed.
    # https://www.mnot.net/blog/2010/04/07/well-known
    # https://tools.ietf.org/html/rfc5785
    location ~* /\.(?!well-known\/) {
        deny all;
    }

    # Prevent clients from accessing to backup/config/source files
    location ~* (?:\.(?:bak|conf|dist|fla|in[ci]|log|psd|sh|sql|sw[op])|~)$ {
        deny all;
    }
}
